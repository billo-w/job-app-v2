# .github/workflows/terraform.yml
name: Terraform Infrastructure CI/CD

on:
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Terraform Action (plan or apply)'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply

permissions:
  contents: read # Read is sufficient as TFC token handles auth to TFC

jobs:
  terraform:
    name: Terraform Plan or Apply # Static name
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        # This token allows the runner to authenticate to Terraform Cloud
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      # DIGITALOCEAN_TOKEN in the job's env block might be picked up by the provider during init
      # if the provider block is configured to look for it and it's not in TFC env vars.
      # However, TFC should handle provider auth if configured with credentials.
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      # TF_VAR_* variables are now expected to be set in the Terraform Cloud workspace
      # and will be automatically available to this command when run by TFC.
      # The DIGITALOCEAN_TOKEN from the job's env block will be available for the provider.
      run: terraform plan -no-color

    - name: Terraform Apply
      id: apply
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.terraform_action == 'apply'
      # TF_VAR_* variables are now expected to be set in the Terraform Cloud workspace.
      # The DIGITALOCEAN_TOKEN from the job's env block will be available for the provider.
      run: terraform apply -auto-approve -no-color
