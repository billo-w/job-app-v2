name: Flask CI/CD Deploy to Droplet

on:
  push:
    branches:
      - main # Trigger on push to main
  pull_request:
    branches:
      - main # Trigger on pull requests targeting main

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: jobapp_testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' # Use your app's Python version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Run tests
      env:
        PYTHONPATH: .
        TEST_DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/jobapp_testdb
        FLASK_APP: app:app
        FLASK_ENV: testing
        WTF_CSRF_ENABLED: "False"
        FLASK_SECRET_KEY: ${{ secrets.TEST_FLASK_SECRET_KEY || 'test-ci-key' }}
        ADZUNA_APP_ID: ${{ secrets.TEST_ADZUNA_APP_ID || 'dummy' }}
        ADZUNA_APP_KEY: ${{ secrets.TEST_ADZUNA_APP_KEY || 'dummy' }}
        AZURE_AI_ENDPOINT: ${{ secrets.TEST_AZURE_AI_ENDPOINT || 'dummy' }}
        AZURE_AI_KEY: ${{ secrets.TEST_AZURE_AI_KEY || 'dummy' }}
      run: pytest tests/

  deploy_to_droplet:
    needs: build_and_test # Run only if tests pass
    runs-on: ubuntu-latest
    # Run only on direct pushes to 'main', not on PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history for deployment logging if needed

    # --- Step 1: Create target directory via ssh-action ---
    # Ensures the target directory exists before scp
    - name: Ensure target directory exists
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DROPLET_IP }}
        username: ${{ secrets.DROPLET_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          mkdir -p /home/${{ secrets.DROPLET_USER }}/job-app-deploy-target
          echo "Target directory ensured."
      # Continue on error allows the next scp step to run even if mkdir fails (if dir exists)
      continue-on-error: true

    # --- Step 2: Secure Copy files using scp ---
    - name: Secure Copy files
      run: |
        # Create a temporary file for the private key
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > deploy_key.pem
        chmod 600 deploy_key.pem
        # Use scp to copy files recursively
        # REMOVED --exclude flags as scp doesn't support them this way
        scp -o StrictHostKeyChecking=no -i deploy_key.pem -r \
          . ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }}:/home/${{ secrets.DROPLET_USER }}/job-app-deploy-target/
        # Remove the temporary key file
        rm deploy_key.pem
      # This step uses the runner's scp command directly

    # --- Step 3: Run commands remotely via SSH ---
    - name: Run deployment commands on Droplet
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DROPLET_IP }}
        username: ${{ secrets.DROPLET_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          echo "--- Starting Deployment Script on Droplet ---"
          # Move files from temporary target to actual app directory, overwriting existing
          # This provides a slightly more atomic update and handles deletion of old files
          echo "Moving deployed files into place using rsync..."
          rsync -a --delete --exclude '.git/' --exclude 'venv/' --exclude '.env' --exclude '__pycache__/' /home/${{ secrets.DROPLET_USER }}/job-app-deploy-target/ /home/${{ secrets.DROPLET_USER }}/job-app/
          rm -rf /home/${{ secrets.DROPLET_USER }}/job-app-deploy-target # Clean up temp dir
          # Navigate to app directory
          cd /home/${{ secrets.DROPLET_USER }}/job-app
          echo "--- Activating virtual environment ---"
          if [ ! -d "venv" ]; then
            echo "Creating virtual environment..."
            python3 -m venv venv
          fi
          source venv/bin/activate
          echo "--- Installing/Updating dependencies ---"
          pip install --no-cache-dir -r requirements.txt
          echo "--- Running Database Migrations ---"
          flask db upgrade
          echo "--- Restarting Gunicorn Service ---"
          sudo systemctl restart jobapp
          echo "--- Deployment Script Finished ---"

