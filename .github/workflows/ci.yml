name: Flask CI/CD

on:
  push:
    branches:
      - main # Trigger on push to main
  pull_request:
    branches:
      - main # Trigger on pull requests targeting main

# --- ADD THIS PERMISSIONS BLOCK ---
permissions:
  contents: write # Allow workflow to push to the repository (needed for production branch update)
# --- END PERMISSIONS BLOCK ---

jobs:
  build_and_test:
    runs-on: ubuntu-latest # Use a standard Linux runner
    services:
      # Start a PostgreSQL database container for tests
      postgres:
        image: postgres:15 # Use a specific version
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: jobapp_testdb
        ports:
          - 5432:5432 # Map port to access it from the runner
        options: >- # Wait for DB to be ready
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Action to get your code

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' # Use your app's Python version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest # Ensure pytest is installed in CI

    - name: Run tests
      env:
        PYTHONPATH: . # Ensure app module can be found
        # Environment variables for your tests
        TEST_DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/jobapp_testdb # Connect to the service container DB
        FLASK_APP: app:app
        FLASK_ENV: testing
        WTF_CSRF_ENABLED: "False" # Often disable CSRF for tests
        # Add other secrets/variables needed for tests below, using GitHub Secrets
        FLASK_SECRET_KEY: ${{ secrets.TEST_FLASK_SECRET_KEY || 'test-ci-key' }}
        # Add dummy values or secrets for external APIs if tests need them
        ADZUNA_APP_ID: ${{ secrets.TEST_ADZUNA_APP_ID || 'dummy' }}
        ADZUNA_APP_KEY: ${{ secrets.TEST_ADZUNA_APP_KEY || 'dummy' }}
        AZURE_AI_ENDPOINT: ${{ secrets.TEST_AZURE_AI_ENDPOINT || 'dummy' }}
        AZURE_AI_KEY: ${{ secrets.TEST_AZURE_AI_KEY || 'dummy' }}
      run: pytest tests/ # Command to run your tests

  # --- Deployment Step (Push to Production Branch) ---
  deploy_to_production_branch:
    needs: build_and_test # Run only if tests pass
    runs-on: ubuntu-latest
    # Run only on direct pushes to 'main', not on PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Needed for merge history

    - name: Merge main to production & Push
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        # Check out production branch, creating if it doesn't exist locally
        git fetch origin production:production || git checkout -b production origin/production || git checkout -b production
        git checkout production
        git pull origin production # Make sure local production is up-to-date
        echo "Merging main (${{ github.sha }}) into production..."
        # Merge the commit that triggered the workflow from main
        git merge --no-ff ${{ github.sha }} -m "Auto-merge main (${{ github.sha }}) into production [ci skip]"
        echo "Pushing production branch to origin..."
        git push origin production
      env:
        # GITHUB_TOKEN is automatically provided by Actions and will use the 'contents: write' permission
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
