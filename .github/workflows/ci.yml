name: Flask CI/CD Deploy to Droplet

on:
  push:
    branches:
      - main # Trigger on push to main
  pull_request:
    branches:
      - main # Trigger on pull requests targeting main

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: jobapp_testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' # Use your app's Python version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Run tests
      env:
        PYTHONPATH: .
        TEST_DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/jobapp_testdb
        FLASK_APP: app:app
        FLASK_ENV: testing
        WTF_CSRF_ENABLED: "False"
        FLASK_SECRET_KEY: ${{ secrets.TEST_FLASK_SECRET_KEY || 'test-ci-key' }}
        ADZUNA_APP_ID: ${{ secrets.TEST_ADZUNA_APP_ID || 'dummy' }}
        ADZUNA_APP_KEY: ${{ secrets.TEST_ADZUNA_APP_KEY || 'dummy' }}
        AZURE_AI_ENDPOINT: ${{ secrets.TEST_AZURE_AI_ENDPOINT || 'dummy' }}
        AZURE_AI_KEY: ${{ secrets.TEST_AZURE_AI_KEY || 'dummy' }}
      run: pytest tests/

  deploy_to_droplet:
    needs: build_and_test # Run only if tests pass
    runs-on: ubuntu-latest
    # Run only on direct pushes to 'main', not on PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH Agent
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Create a temporary deployment directory on Droplet
      run: |
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
        ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} \
        "mkdir -p /home/${{ secrets.DROPLET_USER }}/job-app-deploy-target"

    - name: Deploy code via rsync
      run: |
        # Use rsync with SSH. The key is handled by ssh-agent.
        rsync -avz --delete \
          -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
          --exclude '.git/' \
          --exclude 'venv/' \
          --exclude '.env' \
          --exclude '__pycache__/' \
          --exclude '.DS_Store' \
          --exclude 'migrations/' \
          ./ ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }}:/home/${{ secrets.DROPLET_USER }}/job-app-deploy-target/

    - name: Run deployment commands on Droplet
      run: |
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
        ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} << 'EOF'
          echo "--- Starting Deployment Script on Droplet ---"
          
          echo "Moving deployed files into place using rsync..."
          rsync -a --delete \
            /home/${{ secrets.DROPLET_USER }}/job-app-deploy-target/ \
            /home/${{ secrets.DROPLET_USER }}/job-app/
          
          # Ensure .env file is present in the final location if it's not rsynced
          # For example, if you manage it manually on the server:
          # if [ ! -f "/home/${{ secrets.DROPLET_USER }}/job-app/.env" ]; then
          #   echo "WARNING: .env file not found in /home/${{ secrets.DROPLET_USER }}/job-app/"
          # fi

          echo "Cleaning up temporary deployment directory..."
          rm -rf /home/${{ secrets.DROPLET_USER }}/job-app-deploy-target
          
          echo "Navigating to app directory..."
          cd /home/${{ secrets.DROPLET_USER }}/job-app
          
          echo "--- Activating virtual environment ---"
          if [ ! -d "venv" ]; then
            echo "Creating virtual environment..."
            python3 -m venv venv
          fi
          source venv/bin/activate
          
          echo "--- Installing/Updating dependencies ---"
          pip install --no-cache-dir -r requirements.txt
          
          echo "--- Running Database Migrations ---"
          flask db upgrade
          
          echo "--- Restarting Gunicorn Service ---"
          sudo systemctl restart jobapp
          
          echo "--- Deployment Script Finished ---"
        EOF
